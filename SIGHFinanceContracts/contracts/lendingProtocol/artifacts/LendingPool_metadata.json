{
	"compiler": {
		"version": "0.7.0+commit.9e61f92b"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "borrowRateMode",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "borrowRate",
						"type": "uint256"
					}
				],
				"name": "Borrow",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "initiator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "premium",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "boosterID",
						"type": "uint16"
					}
				],
				"name": "FlashLoan",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowIndex",
						"type": "uint256"
					}
				],
				"name": "InstrumentDataUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "InstrumentUsedAsCollateralDisabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "InstrumentUsedAsCollateralEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidatedCollateralAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "receiveIToken",
						"type": "bool"
					}
				],
				"name": "LiquidationCall",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "RebalanceStableBorrowRate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "repayer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "loanRepaid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalFeeRepaid",
						"type": "uint256"
					}
				],
				"name": "Repay",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					}
				],
				"name": "Swap",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "instrumentAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "platformFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reserveFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "_boosterId",
						"type": "uint16"
					}
				],
				"name": "borrowFeeUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "instrumentAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "platformFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reserveFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "_boosterId",
						"type": "uint16"
					}
				],
				"name": "depositFeeDeducted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "instrumentAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "platformFeePay",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reserveFeePay",
						"type": "uint256"
					}
				],
				"name": "feeRepaid",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "FLASHLOAN_PREMIUM_TOTAL",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "LENDINGPOOL_REVISION",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_MAX_NUMBER_INSTRUMENTS",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "boosterId",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "borrow",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_instrument",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "boosterId",
						"type": "uint16"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceFromBefore",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceToBefore",
						"type": "uint256"
					}
				],
				"name": "finalizeTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiverAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_params",
						"type": "bytes"
					},
					{
						"internalType": "uint16",
						"name": "boosterId",
						"type": "uint16"
					}
				],
				"name": "flashLoan",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.InstrumentConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentData",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "data",
										"type": "uint256"
									}
								],
								"internalType": "struct DataTypes.InstrumentConfigurationMap",
								"name": "configuration",
								"type": "tuple"
							},
							{
								"internalType": "uint128",
								"name": "liquidityIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "variableBorrowIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentLiquidityRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentVariableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentStableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint40",
								"name": "lastUpdateTimestamp",
								"type": "uint40"
							},
							{
								"internalType": "address",
								"name": "iTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "variableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "interestRateStrategyAddress",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "id",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "decimals",
								"type": "uint8"
							}
						],
						"internalType": "struct DataTypes.InstrumentData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentNormalizedIncome",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentNormalizedVariableDebt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getInstrumentsList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserAccountData",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalCollateralUSD",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalDebtUSD",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "availableBorrowsUSD",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentLiquidationThreshold",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ltv",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "healthFactor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.UserConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "iTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "stableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "variableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "interestRateStrategyAddress",
						"type": "address"
					}
				],
				"name": "initInstrument",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IGlobalAddressesProvider",
						"name": "provider",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_receiveIToken",
						"type": "bool"
					}
				],
				"name": "liquidationCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "rebalanceStableBorrowRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "refreshConfig",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "repay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "configuration",
						"type": "uint256"
					}
				],
				"name": "setConfiguration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "rateStrategyAddress",
						"type": "address"
					}
				],
				"name": "setInstrumentInterestRateStrategyAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "val",
						"type": "bool"
					}
				],
				"name": "setPause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "useAsCollateral",
						"type": "bool"
					}
				],
				"name": "setUserUseInstrumentAsCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					}
				],
				"name": "swapBorrowRateMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_instrument",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Aave, _astromartian*",
			"kind": "dev",
			"methods": {
				"borrow(address,uint256,uint256,uint16,address)": {
					"details": "Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`",
					"params": {
						"amount": "The amount to be borrowed",
						"asset": "The address of the underlying asset to borrow",
						"boosterId": "BoosterId of the Booster owned by the caller",
						"interestRateMode": "The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable",
						"onBehalfOf": "Address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*"
					}
				},
				"deposit(address,uint256,uint16)": {
					"details": "deposits The underlying asset into the instrument. A corresponding amount of the overlying asset (ITokens) is minted.",
					"params": {
						"_amount": "the amount to be deposited",
						"_instrument": "the address of the underlying instrument (to be deposited)",
						"boosterId": "boosterId is provided by the caller if he owns a SIGH Booster NFT to get discount on the Deposit Fee*"
					}
				},
				"finalizeTransfer(address,address,address,uint256,uint256,uint256)": {
					"details": "Validates and finalizes an iToken transfer. Only callable by the overlying iToken of the `asset`",
					"params": {
						"amount": "The amount being transferred/withdrawn",
						"asset": "The address of the underlying asset of the iToken",
						"balanceFromBefore": "The iToken balance of the `from` user before the transfer",
						"balanceToBefore": "The iToken balance of the `to` user before the transfer",
						"from": "The user from which the iTokens are transferred",
						"to": "The user receiving the iTokens"
					}
				},
				"flashLoan(address,address,uint256,bytes,uint16)": {
					"details": "allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. ",
					"params": {
						"_params": "the amount requested for this flashloan",
						"amount": "the amount requested for this flashloan",
						"asset": "the address of the principal instrument",
						"boosterId": "Booster ID to avail discount on fee. 0 as default*",
						"receiverAddress": "The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface."
					}
				},
				"getInstrumentData(address)": {
					"details": "Returns the state and configuration of the instrument",
					"params": {
						"asset": "The address of the underlying asset"
					},
					"returns": {
						"_0": "The state of the instrument*"
					}
				},
				"getInstrumentNormalizedIncome(address)": {
					"details": "Returns the normalized income normalized income of the instrument",
					"params": {
						"asset": "The address of the underlying asset"
					},
					"returns": {
						"_0": "The instrument's normalized income"
					}
				},
				"getInstrumentNormalizedVariableDebt(address)": {
					"details": "Returns the normalized variable debt per unit of asset",
					"params": {
						"asset": "The address of the underlying asset"
					},
					"returns": {
						"_0": "The instrument normalized variable debt"
					}
				},
				"getUserAccountData(address)": {
					"details": "Returns the user account data across all the instruments",
					"params": {
						"user": "The address of the user"
					},
					"returns": {
						"availableBorrowsUSD": "the borrowing power left of the user",
						"currentLiquidationThreshold": "the liquidation threshold of the user",
						"healthFactor": "the current health factor of the user*",
						"ltv": "the loan to value of the user",
						"totalCollateralUSD": "the total collateral in USD of the user",
						"totalDebtUSD": "the total debt in USD of the user"
					}
				},
				"getUserConfiguration(address)": {
					"details": "Returns the configuration of the user across all the instruments",
					"params": {
						"user": "The user address"
					},
					"returns": {
						"_0": "The configuration of the user*"
					}
				},
				"initInstrument(address,address,address,address,address)": {
					"details": "Initializes a reserve, activating it, assigning an iToken and debt tokens and an interest rate strategy - Only callable by the LendingPoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the reserve",
						"iTokenAddress": "The address of the VariableDebtToken that will be assigned to the reserve",
						"interestRateStrategyAddress": "The address of the interest rate strategy contract*",
						"stableDebtAddress": "The address of the StableDebtToken that will be assigned to the reserve"
					}
				},
				"initialize(address)": {
					"details": "Function is invoked by the proxy contract when the LendingPool contract is added to the LendingPoolAddressesProvider of the market. - Caching the address of the LendingPoolAddressesProvider in order to reduce gas consumption   on subsequent operations",
					"params": {
						"provider": "The address of the LendingPoolAddressesProvider*"
					}
				},
				"liquidationCall(address,address,address,uint256,bool)": {
					"details": "Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk",
					"params": {
						"_receiveIToken": "`true` if the liquidators wants to receive the collateral iTokens, `false` if he wants to receive the underlying collateral asset directly*",
						"collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
						"debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
						"debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
						"user": "The address of the borrower getting liquidated"
					}
				},
				"rebalanceStableBorrowRate(address,address)": {
					"details": "Rebalances the stable interest rate of a user to the current stable rate defined on the instrument reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been        borrowed at a stable rate and depositors are not earning enough",
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"user": "The address of the user to be rebalanced*"
					}
				},
				"repay(address,uint256,uint256,address)": {
					"params": {
						"amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
						"asset": "The address of the borrowed underlying asset previously borrowed",
						"onBehalfOf": "Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed",
						"rateMode": "The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable"
					},
					"returns": {
						"_0": "The final amount repaid*"
					}
				},
				"setConfiguration(address,uint256)": {
					"details": "Sets the configuration bitmap of the instrument as a whole. Only callable by the LendingPoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the instrument",
						"configuration": "The new configuration bitmap*"
					}
				},
				"setInstrumentInterestRateStrategyAddress(address,address)": {
					"details": "Updates the address of the interest rate strategy contract. Only callable by the LendingPoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the reserve",
						"rateStrategyAddress": "The address of the interest rate strategy contract*"
					}
				},
				"setPause(bool)": {
					"details": "Set the _pause state of a instrument. Only callable by the LendingPoolConfigurator contract",
					"params": {
						"val": "`true` to pause the instrument, `false` to un-pause it"
					}
				},
				"setUserUseInstrumentAsCollateral(address,bool)": {
					"details": "allows depositors to enable or disable a specific deposit as collateral.",
					"params": {
						"asset": "the address of the instrument",
						"useAsCollateral": "true if the user wants to user the deposit as collateral, false otherwise.*"
					}
				},
				"swapBorrowRateMode(address,uint256)": {
					"details": "Allows a borrower to swap his debt between stable and variable mode, or viceversa",
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"rateMode": "The rate mode that the user wants to swap to*"
					}
				},
				"withdraw(address,uint256,address)": {
					"details": "Withdraws the underlying amount of assets requested by _user. This function is executed by the overlying IToken contract in response to a redeem action.",
					"params": {
						"_instrument": "the address of the instrument (underlying instrument address)",
						"amount": "the underlying amount to be redeemed",
						"to": "Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a  different wallet*"
					}
				}
			},
			"title": "LendingPool contract - Users can:   # Deposit   # Withdraw   # Borrow   # Repay   # Swap their loans between variable and stable rate   # Enable/disable their deposits as collateral rebalance stable rate borrow positions   # Liquidate positions   # Execute Flash Loans - To be covered by a proxy contract - All admin functions are callable by the LendingPoolConfigurator contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"repay(address,uint256,uint256,address)": {
					"notice": "Repays a borrowed `amount` on a specific instrument reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/lendingProtocol/lendingPool.sol": "LendingPool"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/dependencies/openzeppelin/math/SafeMath.sol": {
			"keccak256": "0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4",
			"license": "MIT",
			"urls": [
				"bzz-raw://26e50e3f7b6482fb6f598f2e006994a74aa492687daa4b3eee7fd4fb5398ce7f",
				"dweb:/ipfs/QmZudqoPSkA4USLMFsBBmt19dDPZFS8aaAmL5R7pECXu6t"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol": {
			"keccak256": "0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76",
			"license": "MIT",
			"urls": [
				"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b",
				"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/token/ERC20/SafeERC20.sol": {
			"keccak256": "0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e5f78a5b3e707177aa47371e008a54b83dbd28a52055d1746534502b010c21b",
				"dweb:/ipfs/Qmeqfky5DvkMZZY3RtP6kYhFD5bZrPAMVPbqkwWhoUjZ3u"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/utils/Address.sol": {
			"keccak256": "0x799dadcc9be20dc638f07336056f790f144b3f647b9f3c89c52af37c1be4794d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c040ca0e11f4e9441f2307e3e70fac72b96c2394533c07eda42c40db26746e97",
				"dweb:/ipfs/QmYGoQR56HmoBEpJo5bW7gWUXiejbxvBpeCt8dYsP79XWb"
			]
		},
		"localhost/contracts/dependencies/upgradability/VersionedInitializable.sol": {
			"keccak256": "0x4a35b2722384972abf8ca6f83a2e421262a88b2ddd56f92a2d4cc06f9c492743",
			"license": "MIT",
			"urls": [
				"bzz-raw://5508cf15f58a8daaabd2d36b3808f89fde29b644aad0a3f642e396a7ec10e5b1",
				"dweb:/ipfs/QmX7wV9twUVAmToFtfbizsXNiCydAxgEaRcgFuuSwdG47w"
			]
		},
		"localhost/contracts/lendingProtocol/LendingPoolStorage.sol": {
			"keccak256": "0x75209e6a137ffe7fb4a472cb2ce675a1daf682ca35255fc688290193599c9802",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://ce93aaf1699ad4ca0d354f3caa7005216632020d775faf02e893aafe9e773d81",
				"dweb:/ipfs/QmfEVQmfJWAtifVzZo7u64pzUV9VbTWY2eAPgRMacGrAJk"
			]
		},
		"localhost/contracts/lendingProtocol/flashLoan/interfaces/IFlashLoanReceiver.sol": {
			"keccak256": "0xc3f78e1a0da10c1036ab131c2cb07e8a29ae32b301f78ac27fe8c041e1e8de73",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://4c672ef3851667415c0660439bc9b6eb675600869221bf01d2b83627e2dc38bf",
				"dweb:/ipfs/QmYcGZyMJXDfyvYf4KuK52i83btyAssRfqEbxvakfoqNN8"
			]
		},
		"localhost/contracts/lendingProtocol/lendingPool.sol": {
			"keccak256": "0x872026b0c7a99e3c0755ecaf7ab7866a13f2c554b6e51c27f9557f88fbe234b4",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://0dfd2dbd1bc62847cf500dcbccbaab03ef1f91c953a01921584ce68ee7013a3c",
				"dweb:/ipfs/QmcRd5CYXkawSiqrxQCqQY4PwoZkKZz6tRdEPsiWFD35De"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/configuration/InstrumentConfiguration.sol": {
			"keccak256": "0x00d10b74e73a4c8fabbb1c37b59cbf7e86fff8f5063cd99b4093fd3982dc61b6",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://b129c140d5e8fbaad87551d7ff3b03b62057cb990176a4a24dce812477146632",
				"dweb:/ipfs/QmXZsEZLMB3D21ExmepmZRhuz3QQBsChtkBRxZY2a3TAHh"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/configuration/UserConfiguration.sol": {
			"keccak256": "0x5349f6f536a3df1403e5e8e1e040e2d744554c1fde77e5880f9946cf24ae9e20",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://1e44776a9511c68c989759fc88ceefbab2bc9f7b7d91b4cee408ef70e014d420",
				"dweb:/ipfs/QmaW3h7Yu4LBA5Z4wSFr6W2F99Ha6geca4K9xfmx2pVn25"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/helpers/Errors.sol": {
			"keccak256": "0xe410ac075d19c6ed43c2743ef3bf7beb9e57ff4f4c2dc82fd39cec600e4bbd0c",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://e18c34ca5002922273c3cd088989cdcf0c47f397ff367217c5a2c779b3147f3a",
				"dweb:/ipfs/QmSzwoonEf2UvwDYJm6NwJT9gFzBvf3rvHGA7bcpA7Ry7F"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/helpers/Helpers.sol": {
			"keccak256": "0xc59ba504b88205004126e02e774c36dbbd25aa96feac9bfda44bb1a04aad0e6b",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://dd7050fe880107be383c6f103b45604affbb830977c666130d0857db8179a8eb",
				"dweb:/ipfs/QmYbWqEJGkyhZKCVig7YVDviLVUnu6ZdcLNV5PU2NB4xRe"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/logic/GenericLogic.sol": {
			"keccak256": "0x542124a82122a948085b7452bf417971b3b0a6a0206b368c8bf6bad615c23172",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://da34785e37ddeb9f8ee7ee9b47b3047696f2341524f2557044f82d8622f60048",
				"dweb:/ipfs/QmeWwy3xUSViUeb7pPJTXyxN3xPBVrmZbYvwpvLpTb9DXi"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/logic/InstrumentReserveLogic.sol": {
			"keccak256": "0x4b81472fbe48b7f975d49202bf3258c87ad8b3bbcd5f46d3871b4af37f4bbb87",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://7eef334aafa7ee7cb5da2fbbdf03fd9f96526169fdff30ee571d59c1bc6461e6",
				"dweb:/ipfs/QmRm1fqGLB7P9PSgeR58bFYfYE6LXUsG8abSTdWBkDVsop"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/logic/ValidationLogic.sol": {
			"keccak256": "0xfbe61079869506f2b9caff441a7575da9ca81ab1dea3bb7d8fb45ff65be13f51",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://234ac981e71821856279843f8769df501142ee387f1d5957976565c84c750892",
				"dweb:/ipfs/QmQW14adCWkCLLHaCJ71rgpDPZ9XknN17Ude48p1wtYLXk"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/math/MathUtils.sol": {
			"keccak256": "0x04b6ce24410ae1a16622d64d402911388117c0f1d3e29880545811bfdb4522a2",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://b69134b1e206a6afd8aac2de046836cdc79ce5df31d019abb95f683790c5cc86",
				"dweb:/ipfs/QmWroEDZJbeBehKfJmwjMUUv2JZ8ju2zPHAXpJH48k5Pqe"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/math/PercentageMath.sol": {
			"keccak256": "0xec12b86f57c1f4d5b8ea9b3b3468e1b36eb9a0c24ad08954fd6eb0d0141c2d5e",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://7fefa69c5d59102e283fc513ec62eabf051863a3a328db89988d727edff27e65",
				"dweb:/ipfs/QmUYSN5kjc69s94bnEM1iwE9Akf9HL4FEFKQxArrA7AH7K"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/math/WadRayMath.sol": {
			"keccak256": "0x504b929ff88e2fb5b300561d6e7a028c0761213537c6fc78fbcff1eca4e0f7ed",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://fabb2f931112a03593460ae730308803b8c3ced8c174a0a4791fb5c8b5e2fbe9",
				"dweb:/ipfs/QmXApJYKEdDu7CFcfKpn2Ap9wAraxu62ZvfnDfDm3ejfHN"
			]
		},
		"localhost/contracts/lendingProtocol/libraries/types/DataTypes.sol": {
			"keccak256": "0x49156a840c4dcecea3da7e5949445ba724f374a54df7d2f60e33391f50b99581",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://37b3f5d93949cece243196e40eb06734ccea9e4d3fe4e95bb883d1c4077ba614",
				"dweb:/ipfs/QmQSkAcgL3iPCdumSRRbq2qmhNQfiTwG9MiexSTcX7PaR2"
			]
		},
		"localhost/interfaces/GlobalAddressesProvider/IGlobalAddressesProvider.sol": {
			"keccak256": "0x21ac1e2d66fadbf678e845f012ce25df0a88f7bcebfc1f28e1dc4a1acf81f718",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://508f54f396633ee44b37c8da0110dcdbdc1b2580a88726db9d41373165a71eb4",
				"dweb:/ipfs/QmNxrYwiDRQfw3rfiifhyB1tcNPWTd3NNaNUvthBmiAMoT"
			]
		},
		"localhost/interfaces/IPriceOracleGetter.sol": {
			"keccak256": "0x1dd84e83596065528e36d1acae128b8f32d03de3c2863f307e66e247b3548cca",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://261231be7a90aaaacb0c16bee5ddb52c42fd1467502e6a9114dc070eb5871b3c",
				"dweb:/ipfs/QmSWGjXonfFRnCKbKRwgkhwf4ReoTEUrdo54ZCvX1bG7e4"
			]
		},
		"localhost/interfaces/lendingProtocol/IFeeProvider.sol": {
			"keccak256": "0x4db2ede0ada68c4aeb1118f04e7d5cb7c4ea9cd7304bc63e520753bf52b72132",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://e94104a3ba214eb92eb461fe0335980c2974d5461c514b2e7c43ed209deca493",
				"dweb:/ipfs/QmfJdSz8ssxasPQjmqDPqHz9Sa16EPaHD47JJw3VoMVJBi"
			]
		},
		"localhost/interfaces/lendingProtocol/IFeeProviderLendingPool.sol": {
			"keccak256": "0xbed6fa0793f786c8184f4e89c457e1825f142404659490859fe1d76246127ee2",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://38928ac8817801d1404bf6d97bbbe82783b8d10c9bb5fd02dd9196e2b0524c2b",
				"dweb:/ipfs/QmW3b51K38JpBeb2TQxC6hjvZKnUw7uAyJivn4N9X9eQx5"
			]
		},
		"localhost/interfaces/lendingProtocol/IIToken.sol": {
			"keccak256": "0x445144ca336ca836500bfc787a9ce410ce5d5150fdc991aaf67ea48a99f3c378",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://64c32f12590af4ea24b4a4060deb24eff45a8c4923ce2d9ace985c1e96fd3739",
				"dweb:/ipfs/QmYjQXxbydPLyDyYLUoYUfgBTaRi46NjGX2kpiP5GK6Kjj"
			]
		},
		"localhost/interfaces/lendingProtocol/IInstrumentInterestRateStrategy.sol": {
			"keccak256": "0x58553f2eb968f31c8febd913648f241dd95c8b0a6b0e028478a85adccd69400f",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://0bc04dc8ace55224ec3e9f40dae1390e6beb40dfb6ba86e3237359cba672042c",
				"dweb:/ipfs/QmYY44fSgedCn5d9CQdRnuPSUvanDeGZKgq1DwHjnYzVYB"
			]
		},
		"localhost/interfaces/lendingProtocol/ILendingPool.sol": {
			"keccak256": "0x11393732de789977cf45118be9ce6d69e5cd687456d4e02ed62ee40a09b02642",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://9d57b3f2e6e2432d4dd854d31569267f5a7bd2c06edbd8adfe62b3f6e282d097",
				"dweb:/ipfs/QmZoAWudSptVTD9A1cypFBDQ6ou2Ygh838hHaAAoQ36sjE"
			]
		},
		"localhost/interfaces/lendingProtocol/ISIGHHarvestDebtToken.sol": {
			"keccak256": "0xf2d1d2529d3e24452388f9a59c82a0ac48a79784caeff1aee7289b237377fb32",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://aad676f3d0e673c1762f859f2e64c935dd6d92d496850ecac8527d06da71df62",
				"dweb:/ipfs/QmZP4GUMu7uerCu9369MoCCAbauCvK3M6CtfqzMZazHMyh"
			]
		},
		"localhost/interfaces/lendingProtocol/ISIGHVolatilityHarvesterLendingPool.sol": {
			"keccak256": "0x25f4643a796bcee484cbf64b97a669f6aaa611f27f5eacf44dbee3a2d625dcc2",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://4d5c2f9f1484a892ee73151d51666c76109f0e800ad8a3887aaebf36bf8c0c94",
				"dweb:/ipfs/QmT4DphcW3uvSnLkZjgd4mSs6q4g2b3RKBV5XjHKUyZujQ"
			]
		},
		"localhost/interfaces/lendingProtocol/IScaledBalanceToken.sol": {
			"keccak256": "0x1594eeedc9845c21b6b2daf0091f3ebaf46f5c9c898d0048f6b07c5c89a45b8e",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://32ae84ad3e20ab2827ab24ced184f48e9c42678072a6946131d953e52fc63922",
				"dweb:/ipfs/QmZtu9jJWkgoT3ct563RGSFTYwKdsM8cj5NMuq911cbzU1"
			]
		},
		"localhost/interfaces/lendingProtocol/IStableDebtToken.sol": {
			"keccak256": "0xb24827e55cd852a308849c2c06719872919afe94f4b646106cd0a3086e3c21ed",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://b5b0e333546f41d3604b5a315f6209597b70b720e7110e36041f48cf8dee7dda",
				"dweb:/ipfs/QmWnxzzb9oABEZkAeMgEuRG8nEXMA7RcgJYdhyXLjMQziw"
			]
		},
		"localhost/interfaces/lendingProtocol/IVariableDebtToken.sol": {
			"keccak256": "0x4a3040a6a6f9fcab3a3ce17edf8e13b369347badce6c1d03904f088242d0466a",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://a27c914b8bb710937b84aee352ba74c5aaa55ffc5737f13cc0d02c016126028d",
				"dweb:/ipfs/QmYLMByCo7AAjNPaNUV5rXegDvyQCTHV7Uw6BVsSUpdqET"
			]
		}
	},
	"version": 1
}