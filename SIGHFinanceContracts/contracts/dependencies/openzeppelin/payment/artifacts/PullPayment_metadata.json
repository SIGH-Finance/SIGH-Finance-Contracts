{
	"compiler": {
		"version": "0.7.0+commit.9e61f92b"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "dest",
						"type": "address"
					}
				],
				"name": "payments",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "payee",
						"type": "address"
					}
				],
				"name": "withdrawPayments",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.",
			"kind": "dev",
			"methods": {
				"payments(address)": {
					"details": "Returns the payments owed to an address.",
					"params": {
						"dest": "The creditor's address."
					}
				},
				"withdrawPayments(address)": {
					"details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
					"params": {
						"payee": "Whose payments will be withdrawn."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/dependencies/openzeppelin/payment/PullPayment.sol": "PullPayment"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/dependencies/openzeppelin/GSN/Context.sol": {
			"keccak256": "0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938",
			"license": "MIT",
			"urls": [
				"bzz-raw://248246ac66e6479dce1ad7d4945ec5540c98ceb09881e93c93f7c48d5772925c",
				"dweb:/ipfs/QmXr8tmUiZgEYid6ixeeBRmTdUnASWjKzhP3KRxMPy8fRt"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/access/Ownable.sol": {
			"keccak256": "0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae",
			"license": "MIT",
			"urls": [
				"bzz-raw://198ef77ef5d9f7a7709d6bbfba1d4d54d82ccc15358e9dced37f1376dac887fa",
				"dweb:/ipfs/QmQHFvCA74s3AHU3NMn4AAYzFTt6UotWq7yk3WzLQs1oJS"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/math/SafeMath.sol": {
			"keccak256": "0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4",
			"license": "MIT",
			"urls": [
				"bzz-raw://26e50e3f7b6482fb6f598f2e006994a74aa492687daa4b3eee7fd4fb5398ce7f",
				"dweb:/ipfs/QmZudqoPSkA4USLMFsBBmt19dDPZFS8aaAmL5R7pECXu6t"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/payment/PullPayment.sol": {
			"keccak256": "0xefe830e4eb8680b59544da6f3e11b7c2d6efaae9867f8a4f18472b3844544dc0",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3f7cc6d5d4fd02175218500d449b8d1aa3c636d671d9786299caf2b1187efa7",
				"dweb:/ipfs/QmRTMZbHgFt3pkL4SVpo8a2xmBKMVGXaKoyHKeFyRCUykp"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/payment/escrow/Escrow.sol": {
			"keccak256": "0xe5acc1e8c8f2f279799a091e1242aa5d0efea1644e2e5421a6171fac472a79e6",
			"license": "MIT",
			"urls": [
				"bzz-raw://5576c10c2d156a21371c002abfc620a7e772be3c4bb823cdc27a7e1009d5e175",
				"dweb:/ipfs/QmWYAXzZ9rA4hjS8xee1jXQrzKP2cGJ397qTTNuaZPUohf"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/utils/Address.sol": {
			"keccak256": "0x799dadcc9be20dc638f07336056f790f144b3f647b9f3c89c52af37c1be4794d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c040ca0e11f4e9441f2307e3e70fac72b96c2394533c07eda42c40db26746e97",
				"dweb:/ipfs/QmYGoQR56HmoBEpJo5bW7gWUXiejbxvBpeCt8dYsP79XWb"
			]
		}
	},
	"version": 1
}