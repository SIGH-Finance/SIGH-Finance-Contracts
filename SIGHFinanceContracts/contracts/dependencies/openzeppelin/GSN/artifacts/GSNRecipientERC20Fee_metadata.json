{
	"compiler": {
		"version": "0.7.0+commit.9e61f92b"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldRelayHub",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newRelayHub",
						"type": "address"
					}
				],
				"name": "RelayHubChanged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "transactionFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "maxPossibleCharge",
						"type": "uint256"
					}
				],
				"name": "acceptRelayedCall",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getHubAddr",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "actualCharge",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "preRetVal",
						"type": "bytes32"
					}
				],
				"name": "postRelayedCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					}
				],
				"name": "preRelayedCall",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "relayHubVersion",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that charges transaction fees in a special purpose ERC20 token, which we refer to as the gas payment token. The amount charged is exactly the amount of Ether charged to the recipient. This means that the token is essentially pegged to the value of Ether. The distribution strategy of the gas payment token to users is not defined by this contract. It's a mintable token whose only minter is the recipient, so the strategy must be implemented in a derived contract, making use of the internal {_mint} function.",
			"kind": "dev",
			"methods": {
				"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {
					"details": "Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN."
				},
				"constructor": {
					"details": "The arguments to the constructor are the details that the gas payment token will have: `name` and `symbol`. `decimals` is hard-coded to 18."
				},
				"getHubAddr()": {
					"details": "Returns the address of the {IRelayHub} contract for this recipient."
				},
				"postRelayedCall(bytes,bool,uint256,bytes32)": {
					"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."
				},
				"preRelayedCall(bytes)": {
					"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."
				},
				"relayHubVersion()": {
					"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."
				},
				"token()": {
					"details": "Returns the gas payment token."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/dependencies/openzeppelin/GSN/GSNRecipientERC20Fee.sol": "GSNRecipientERC20Fee"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/dependencies/openzeppelin/GSN/Context.sol": {
			"keccak256": "0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938",
			"license": "MIT",
			"urls": [
				"bzz-raw://248246ac66e6479dce1ad7d4945ec5540c98ceb09881e93c93f7c48d5772925c",
				"dweb:/ipfs/QmXr8tmUiZgEYid6ixeeBRmTdUnASWjKzhP3KRxMPy8fRt"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/GSNRecipient.sol": {
			"keccak256": "0x38a4eeba0e2603ff12f8b3175d7ad96f7ed1b545012eca074c9b351a1a7763a6",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a433d53987ac7639aac6bc3de3af3bb70d66f783179358fb0d99e96ee143c2a",
				"dweb:/ipfs/QmaVr2inYH4NnzmedfTSN11tHqyBb3CQua5ZADgcoNKZb6"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/GSNRecipientERC20Fee.sol": {
			"keccak256": "0xeee0ba45e735cfc7d8551f590cda3084ab0897f41fad9a6c245678814ff1041b",
			"license": "MIT",
			"urls": [
				"bzz-raw://b09752fc83a9318b390ea11b20ec9dd0e96703f1bf780af65eba557e12f0f5dd",
				"dweb:/ipfs/QmXzkuEpoNxGRzH5Vz6miT9r1o1rkicsLhK6wuP9CR3knD"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/IRelayHub.sol": {
			"keccak256": "0xf18bdc4a17009fcddb0b00e87c34e6109f01dfbfa7fd06a2dc4123c869626f10",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0025f9017e5aee36784d2294cd2395bb58c4b791cc7edd0a5ef6f8675fdbae3",
				"dweb:/ipfs/QmQNRo5oaQ2toNV87zz1dVFZoibi7LFsR888uCfvjoCuXY"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/IRelayRecipient.sol": {
			"keccak256": "0xf9a213b0e6f21d27ee7023f3455f1b6f32bb8b074d2b7a146fbb206df02a5711",
			"license": "MIT",
			"urls": [
				"bzz-raw://5eba302ccd02851d2093f4faab8677b92118ff1f52eabf2d5929e401901ccd34",
				"dweb:/ipfs/QmWCvVMt3GCKZCPmNoUx3GWer57Migd18Hpk5dPg3z5VbK"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/access/Ownable.sol": {
			"keccak256": "0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae",
			"license": "MIT",
			"urls": [
				"bzz-raw://198ef77ef5d9f7a7709d6bbfba1d4d54d82ccc15358e9dced37f1376dac887fa",
				"dweb:/ipfs/QmQHFvCA74s3AHU3NMn4AAYzFTt6UotWq7yk3WzLQs1oJS"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/math/SafeMath.sol": {
			"keccak256": "0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4",
			"license": "MIT",
			"urls": [
				"bzz-raw://26e50e3f7b6482fb6f598f2e006994a74aa492687daa4b3eee7fd4fb5398ce7f",
				"dweb:/ipfs/QmZudqoPSkA4USLMFsBBmt19dDPZFS8aaAmL5R7pECXu6t"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/token/ERC20/ERC20.sol": {
			"keccak256": "0x482b6d82ba1c9c73758ae15068a438361d4187b7a4e342db17ef0f828cb5e21a",
			"license": "MIT",
			"urls": [
				"bzz-raw://89725e56bc9c6cfb69521ceaa4a489561b928e930b71e30db85b24024c1c2c03",
				"dweb:/ipfs/QmNvpotZA1Fe48msV6TShSTVxeQ2dkaDS9MTKP4bNxyUG3"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol": {
			"keccak256": "0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76",
			"license": "MIT",
			"urls": [
				"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b",
				"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/token/ERC20/SafeERC20.sol": {
			"keccak256": "0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e5f78a5b3e707177aa47371e008a54b83dbd28a52055d1746534502b010c21b",
				"dweb:/ipfs/Qmeqfky5DvkMZZY3RtP6kYhFD5bZrPAMVPbqkwWhoUjZ3u"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/utils/Address.sol": {
			"keccak256": "0x799dadcc9be20dc638f07336056f790f144b3f647b9f3c89c52af37c1be4794d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c040ca0e11f4e9441f2307e3e70fac72b96c2394533c07eda42c40db26746e97",
				"dweb:/ipfs/QmYGoQR56HmoBEpJo5bW7gWUXiejbxvBpeCt8dYsP79XWb"
			]
		}
	},
	"version": 1
}