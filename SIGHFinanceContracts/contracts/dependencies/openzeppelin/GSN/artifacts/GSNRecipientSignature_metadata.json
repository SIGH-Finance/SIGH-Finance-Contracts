{
	"compiler": {
		"version": "0.7.0+commit.9e61f92b"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "trustedSigner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldRelayHub",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newRelayHub",
						"type": "address"
					}
				],
				"name": "RelayHubChanged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "relay",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "encodedFunction",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "transactionFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasLimit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "approvalData",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "acceptRelayedCall",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getHubAddr",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "actualCharge",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "preRetVal",
						"type": "bytes32"
					}
				],
				"name": "postRelayedCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					}
				],
				"name": "preRelayedCall",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "relayHubVersion",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that allows relayed transactions through when they are accompanied by the signature of a trusted signer. The intent is for this signature to be generated by a server that performs validations off-chain. Note that nothing is charged to the user in this scheme. Thus, the server should make sure to account for this in their economic and threat model.",
			"kind": "dev",
			"methods": {
				"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": {
					"details": "Ensures that only transactions with a trusted signature can be relayed through the GSN."
				},
				"constructor": {
					"details": "Sets the trusted signer that is going to be producing signatures to approve relayed calls."
				},
				"getHubAddr()": {
					"details": "Returns the address of the {IRelayHub} contract for this recipient."
				},
				"postRelayedCall(bytes,bool,uint256,bytes32)": {
					"details": "See `IRelayRecipient.postRelayedCall`. This function should not be overridden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."
				},
				"preRelayedCall(bytes)": {
					"details": "See `IRelayRecipient.preRelayedCall`. This function should not be overridden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract."
				},
				"relayHubVersion()": {
					"details": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/dependencies/openzeppelin/GSN/GSNRecipientSignature.sol": "GSNRecipientSignature"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/dependencies/openzeppelin/GSN/Context.sol": {
			"keccak256": "0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938",
			"license": "MIT",
			"urls": [
				"bzz-raw://248246ac66e6479dce1ad7d4945ec5540c98ceb09881e93c93f7c48d5772925c",
				"dweb:/ipfs/QmXr8tmUiZgEYid6ixeeBRmTdUnASWjKzhP3KRxMPy8fRt"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/GSNRecipient.sol": {
			"keccak256": "0x38a4eeba0e2603ff12f8b3175d7ad96f7ed1b545012eca074c9b351a1a7763a6",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a433d53987ac7639aac6bc3de3af3bb70d66f783179358fb0d99e96ee143c2a",
				"dweb:/ipfs/QmaVr2inYH4NnzmedfTSN11tHqyBb3CQua5ZADgcoNKZb6"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/GSNRecipientSignature.sol": {
			"keccak256": "0x495033297363dc8c7fd7d1bdebd4c212a50f2e5984bdf2c18088aa0a20d72211",
			"license": "MIT",
			"urls": [
				"bzz-raw://5b6f826d24c4cf3dd3b31b3aa711e7dec7ea44e8a58e45a8554846e07c810caf",
				"dweb:/ipfs/QmTPMmpryQCTNyyqxc9jnentnpRfS6zXUiRhXGuzRzsKMt"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/IRelayHub.sol": {
			"keccak256": "0xf18bdc4a17009fcddb0b00e87c34e6109f01dfbfa7fd06a2dc4123c869626f10",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0025f9017e5aee36784d2294cd2395bb58c4b791cc7edd0a5ef6f8675fdbae3",
				"dweb:/ipfs/QmQNRo5oaQ2toNV87zz1dVFZoibi7LFsR888uCfvjoCuXY"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/GSN/IRelayRecipient.sol": {
			"keccak256": "0xf9a213b0e6f21d27ee7023f3455f1b6f32bb8b074d2b7a146fbb206df02a5711",
			"license": "MIT",
			"urls": [
				"bzz-raw://5eba302ccd02851d2093f4faab8677b92118ff1f52eabf2d5929e401901ccd34",
				"dweb:/ipfs/QmWCvVMt3GCKZCPmNoUx3GWer57Migd18Hpk5dPg3z5VbK"
			]
		},
		"localhost/contracts/dependencies/openzeppelin/cryptography/ECDSA.sol": {
			"keccak256": "0x330669da6b4f9b87a2be69ec3738a5638bcdad88f9a4481ff73fbfdf937cdd8b",
			"license": "MIT",
			"urls": [
				"bzz-raw://1ca5941ce63b89e7714d20a9b3fbb77c869161c7f5cd85c5f9b81a111802a474",
				"dweb:/ipfs/QmV6SwiXxWY2C174GkjELg7dn8ktmeXGjwDwtke6tzVJRt"
			]
		}
	},
	"version": 1
}