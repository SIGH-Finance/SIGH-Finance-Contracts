{
	"compiler": {
		"version": "0.7.0+commit.9e61f92b"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "platformFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reserveFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "borrowRateMode",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "borrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "boosterID",
						"type": "uint256"
					}
				],
				"name": "Borrow",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "platformFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reserveFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "boosterID",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "initiator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "premium",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "boosterID",
						"type": "uint16"
					}
				],
				"name": "FlashLoan",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowIndex",
						"type": "uint256"
					}
				],
				"name": "InstrumentDataUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "InstrumentUsedAsCollateralDisabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "InstrumentUsedAsCollateralEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidatedCollateralAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "receiveIToken",
						"type": "bool"
					}
				],
				"name": "LiquidationCall",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "RebalanceStableBorrowRate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "repayer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "platformFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reserveFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Repay",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					}
				],
				"name": "Swap",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "boosterID",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "borrow",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "boosterID",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceFromAfter",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceToBefore",
						"type": "uint256"
					}
				],
				"name": "finalizeTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiverAddress",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "assets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "modes",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					},
					{
						"internalType": "uint16",
						"name": "boosterID",
						"type": "uint16"
					}
				],
				"name": "flashLoan",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.InstrumentConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentData",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "data",
										"type": "uint256"
									}
								],
								"internalType": "struct DataTypes.InstrumentConfigurationMap",
								"name": "configuration",
								"type": "tuple"
							},
							{
								"internalType": "uint128",
								"name": "liquidityIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "variableBorrowIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentLiquidityRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentVariableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentStableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint40",
								"name": "lastUpdateTimestamp",
								"type": "uint40"
							},
							{
								"internalType": "address",
								"name": "iTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "variableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "interestRateStrategyAddress",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "id",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "decimals",
								"type": "uint8"
							}
						],
						"internalType": "struct DataTypes.InstrumentData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentNormalizedIncome",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getInstrumentNormalizedVariableDebt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getInstrumentsList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserAccountData",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalCollateralUSD",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalDebtUSD",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "availableBorrowsUSD",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentLiquidationThreshold",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ltv",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "healthFactor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.UserConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "iTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "stableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "variableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_SIGHHarvesterProxyAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "interestRateStrategyAddress",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "underlyingAssetDecimals",
						"type": "uint8"
					}
				],
				"name": "initInstrument",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "receiveIToken",
						"type": "bool"
					}
				],
				"name": "liquidationCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "rebalanceStableBorrowRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "refreshConfig",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "repay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "configuration",
						"type": "uint256"
					}
				],
				"name": "setConfiguration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "instrument",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "rateStrategyAddress",
						"type": "address"
					}
				],
				"name": "setInstrumentInterestRateStrategyAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "val",
						"type": "bool"
					}
				],
				"name": "setPause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "useAsCollateral",
						"type": "bool"
					}
				],
				"name": "setUserUseInstrumentAsCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					}
				],
				"name": "swapBorrowRateMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"Borrow(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": {
					"details": "Emitted on borrow() and flashLoan() when debt needs to be opened",
					"params": {
						"amount": "The amount borrowed out",
						"boosterID": "The boosterID of the Booster used to get a discount on the Fee*",
						"borrowRate": "The numeric rate at which the user has borrowed",
						"borrowRateMode": "The rate mode: 1 for Stable, 2 for Variable",
						"instrument": "The address of the underlying asset being borrowed",
						"onBehalfOf": "The address that will be getting the debt",
						"platformFee": "Platform Fee charged",
						"reserveFee": "Reserve Fee charged",
						"user": "The address of the user initiating the borrow(), receiving the funds on borrow() or just initiator of the transaction on flashLoan()"
					}
				},
				"Deposit(address,address,uint256,uint256,uint256,uint256)": {
					"details": "Emitted on deposit()",
					"params": {
						"amount": "The amount deposited",
						"boosterID": "The boosterID of the Booster used to get a discount on the Fee*",
						"instrument": "The address of the underlying asset of the instrument",
						"platformFee": "Platform Fee charged",
						"reserveFee": "Reserve Fee charged",
						"user": "The address initiating the deposit"
					}
				},
				"FlashLoan(address,address,address,uint256,uint256,uint16)": {
					"details": "Emitted on flashLoan()",
					"params": {
						"amount": "The amount flash borrowed",
						"asset": "The address of the asset being flash borrowed",
						"boosterID": "The boosterID of the Booster used to get a discount on the Fee*",
						"initiator": "The address initiating the flash loan",
						"premium": "The fee flash borrowed",
						"target": "The address of the flash loan receiver contract"
					}
				},
				"InstrumentDataUpdated(address,uint256,uint256,uint256,uint256,uint256)": {
					"details": "Emitted when the state of a instrument is updated. NOTE: This event is actually declared in the InstrumentLogic library and emitted in the updateInterestRates() function. Since the function is internal, the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it gets added to the LendingPool ABI",
					"params": {
						"instrument": "The address of the underlying asset",
						"liquidityIndex": "The new liquidity index",
						"liquidityRate": "The new liquidity rate",
						"stableBorrowRate": "The new stable borrow rate",
						"variableBorrowIndex": "The new variable borrow index*",
						"variableBorrowRate": "The new variable borrow rate"
					}
				},
				"InstrumentUsedAsCollateralDisabled(address,address)": {
					"details": "Emitted on setUserUseInstrumentAsCollateral()",
					"params": {
						"instrument": "The address of the underlying asset",
						"user": "The address of the user enabling the usage as collateral*"
					}
				},
				"InstrumentUsedAsCollateralEnabled(address,address)": {
					"details": "Emitted on setUserUseInstrumentAsCollateral()",
					"params": {
						"instrument": "The address of the underlying asset of the instrument",
						"user": "The address of the user enabling the usage as collateral*"
					}
				},
				"LiquidationCall(address,address,address,uint256,uint256,address,bool)": {
					"details": "Emitted when a borrower is liquidated. This event is emitted by the LendingPool via LendingPoolCollateral manager using a DELEGATECALL This allows to have the events in the generated ABI for LendingPool.",
					"params": {
						"collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
						"debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
						"debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
						"liquidatedCollateralAmount": "The amount of collateral received by the liiquidator",
						"liquidator": "The address of the liquidator",
						"receiveIToken": "`true` if the liquidators wants to receive the collateral iTokens, `false` if he wants to receive the underlying collateral asset directly*",
						"user": "The address of the borrower getting liquidated"
					}
				},
				"RebalanceStableBorrowRate(address,address)": {
					"details": "Emitted on rebalanceStableBorrowRate()",
					"params": {
						"instrument": "The address of the underlying asset",
						"user": "The address of the user for which the rebalance has been executed*"
					}
				},
				"Repay(address,address,address,uint256,uint256,uint256)": {
					"details": "Emitted on repay()",
					"params": {
						"amount": "The amount repaid*",
						"instrument": "The address of the underlying asset of the instrument",
						"repayer": "The address of the user initiating the repay(), providing the funds",
						"user": "The beneficiary of the repayment, getting his debt reduced"
					}
				},
				"Swap(address,address,uint256)": {
					"details": "Emitted on swapBorrowRateMode()",
					"params": {
						"instrument": "The address of the underlying asset of the instrument",
						"rateMode": "The rate mode that the user wants to swap to*",
						"user": "The address of the user swapping his rate mode"
					}
				},
				"Withdraw(address,address,address,uint256)": {
					"details": "Emitted on withdraw()",
					"params": {
						"amount": "The amount to be withdrawn*",
						"instrument": "The address of the underlyng asset being withdrawn",
						"to": "Address that will receive the underlying",
						"user": "The address initiating the withdrawal, owner of iTokens"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"borrow(address,uint256,uint256,uint16,address)": {
					"details": "Allows users to borrow a specific `amount` of the underlying asset, provided that the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`",
					"params": {
						"amount": "The amount to be borrowed",
						"asset": "The address of the underlying asset to borrow",
						"boosterID": "of the Booster used to get a discount on the Fee. 0 if no Booster NFT available",
						"interestRateMode": "The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable",
						"onBehalfOf": "Address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*"
					}
				},
				"deposit(address,uint256,uint256)": {
					"details": "Deposits an `amount` of underlying asset, receiving in return overlying iTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC",
					"params": {
						"amount": "The amount to be deposited",
						"asset": "The address of the underlying asset to deposit",
						"boosterID": "of the Booster used to get a discount on the Fee. 0 if no Booster NFT available*"
					}
				},
				"flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)": {
					"details": "Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com",
					"params": {
						"amounts": "The amounts amounts being flash-borrowed",
						"assets": "The addresses of the assets being flash-borrowed",
						"boosterID": "of the Booster used to get a discount on the Fee. 0 if no Booster NFT available*",
						"modes": "Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address",
						"onBehalfOf": "The address  that will receive the debt in the case of using on `modes` 1 or 2",
						"params": "Variadic packed params to pass to the receiver as extra information",
						"receiverAddress": "The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface"
					}
				},
				"getInstrumentData(address)": {
					"details": "Returns the state and configuration of the instrument",
					"params": {
						"asset": "The address of the underlying asset"
					},
					"returns": {
						"_0": "The state of the instrument*"
					}
				},
				"getInstrumentNormalizedIncome(address)": {
					"details": "Returns the normalized income normalized income of the instrument",
					"params": {
						"asset": "The address of the underlying asset"
					},
					"returns": {
						"_0": "The instrument's normalized income"
					}
				},
				"getInstrumentNormalizedVariableDebt(address)": {
					"details": "Returns the normalized variable debt per unit of asset",
					"params": {
						"asset": "The address of the underlying asset"
					},
					"returns": {
						"_0": "The instrument normalized variable debt"
					}
				},
				"getUserAccountData(address)": {
					"details": "Returns the user account data across all the instruments",
					"params": {
						"user": "The address of the user"
					},
					"returns": {
						"availableBorrowsUSD": "the borrowing power left of the user",
						"currentLiquidationThreshold": "the liquidation threshold of the user",
						"healthFactor": "the current health factor of the user*",
						"ltv": "the loan to value of the user",
						"totalCollateralUSD": "the total collateral in USD of the user",
						"totalDebtUSD": "the total debt in USD of the user"
					}
				},
				"getUserConfiguration(address)": {
					"details": "Returns the configuration of the user across all the instruments",
					"params": {
						"user": "The user address"
					},
					"returns": {
						"_0": "The configuration of the user*"
					}
				},
				"liquidationCall(address,address,address,uint256,bool)": {
					"details": "Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk",
					"params": {
						"collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
						"debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
						"debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
						"receiveIToken": "`true` if the liquidators wants to receive the collateral iTokens, `false` if he wants to receive the underlying collateral asset directly*",
						"user": "The address of the borrower getting liquidated"
					}
				},
				"rebalanceStableBorrowRate(address,address)": {
					"details": "Rebalances the stable interest rate of a user to the current stable rate defined - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been        borrowed at a stable rate and depositors are not earning enough",
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"user": "The address of the user to be rebalanced*"
					}
				},
				"repay(address,uint256,uint256,address)": {
					"params": {
						"amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
						"asset": "The address of the borrowed underlying asset previously borrowed",
						"onBehalfOf": "Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed",
						"rateMode": "The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable"
					},
					"returns": {
						"_0": "The final amount repaid*"
					}
				},
				"setUserUseInstrumentAsCollateral(address,bool)": {
					"details": "Allows depositors to enable/disable a specific deposited asset as collateral",
					"params": {
						"asset": "The address of the underlying asset deposited",
						"useAsCollateral": "`true` if the user wants to use the deposit as collateral, `false` otherwise*"
					}
				},
				"swapBorrowRateMode(address,uint256)": {
					"details": "Allows a borrower to swap his debt between stable and variable mode, or viceversa",
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"rateMode": "The rate mode that the user wants to swap to*"
					}
				},
				"withdraw(address,uint256,address)": {
					"details": "Withdraws an `amount` of underlying asset, burning the equivalent iTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC",
					"params": {
						"amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole iToken balance",
						"asset": "The address of the underlying asset to withdraw",
						"to": "Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
					},
					"returns": {
						"_0": "The final amount withdrawn*"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"repay(address,uint256,uint256,address)": {
					"notice": "Repays a borrowed `amount`, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/interfaces/lendingProtocol/ILendingPool.sol": "ILendingPool"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/lendingProtocol/libraries/types/DataTypes.sol": {
			"keccak256": "0x49156a840c4dcecea3da7e5949445ba724f374a54df7d2f60e33391f50b99581",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://37b3f5d93949cece243196e40eb06734ccea9e4d3fe4e95bb883d1c4077ba614",
				"dweb:/ipfs/QmQSkAcgL3iPCdumSRRbq2qmhNQfiTwG9MiexSTcX7PaR2"
			]
		},
		"localhost/interfaces/GlobalAddressesProvider/IGlobalAddressesProvider.sol": {
			"keccak256": "0x21ac1e2d66fadbf678e845f012ce25df0a88f7bcebfc1f28e1dc4a1acf81f718",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://508f54f396633ee44b37c8da0110dcdbdc1b2580a88726db9d41373165a71eb4",
				"dweb:/ipfs/QmNxrYwiDRQfw3rfiifhyB1tcNPWTd3NNaNUvthBmiAMoT"
			]
		},
		"localhost/interfaces/lendingProtocol/ILendingPool.sol": {
			"keccak256": "0x6138383c7d28a7589419a63a2503044063dba9bf9312119fd6dd958c8e9e79f6",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://57c364cc637c6883b38e3c2318d0e8b670ce701d996fe6c5c8c9582ac362f7fe",
				"dweb:/ipfs/QmNk9Xc82oM2EaevT6vnFKN2fhiLUNayjymuX9bJbmaYL2"
			]
		}
	},
	"version": 1
}